Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],

   3
   / \
  9  20
    /  \
   15   7

[
  [15,7],
  [9,20],
  [3]
]


//Solution

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<TreeNode>();
       
        List<List<Integer>> res=new LinkedList<List<Integer>>();
        if(root==null){
            return res;
        }
         q.add(root);
        while(!q.isEmpty()){
            List<Integer> al=new ArrayList<Integer>();
            int i=0;
            int n=q.size();
            while(i<n){
                TreeNode temp=q.poll();
                al.add(temp.val);
                if(temp.left!=null){
                    q.offer(temp.left);
                } 
                if(temp.right!=null){
                    q.offer(temp.right);
                }
                i++;
            }
            res.add(0,al);
            //al.clear();
        }
        //Collections.reverse(res);
        return res;
    }
}